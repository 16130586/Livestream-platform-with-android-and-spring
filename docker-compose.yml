version: '2'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - M_REP
  kafka:
    image: wurstmeister/kafka:1.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: {your-machine-ip}
      KAFKA_CREATE_TOPICS: "M_EVENT:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./docker-storage/kafka/var/run/docker.sock:/var/run/docker.sock
    networks:
      - M_REP
  mysql_binlog:
    image: mysql
    container_name: mysql_binlog
    environment:
       - MYSQL_ROOT_PASSWORD=123456
       - MYSQL_USER=4tuser
       - MYSQL_PASSWORD=123456
    ports:
       - 7777:3306
    volumes:
      - ./docker-storage/mysql/conf.d:/etc/mysql/conf.d/
      - ./docker-storage/mysql/logs/:/usr/custom-storage/logs
      - ./docker-storage/mysql/init:/usr/custom-storage/init
    command: --init-file /usr/custom-storage/init/init.sql
    networks:
      - M_REP
    restart: always
  maxwell:
    image: zendesk/maxwell
    container_name: maxwell
    command: bin/maxwell --config /etc/maxwell/config.properties --kafka_topic=M_EVENT --kafka.bootstrap.servers=kafka:9092 --javascript /etc/maxwell/custom-filter/filter.js
    # env_file:
    volumes: 
      - ./docker-storage/maxwell:/etc/maxwell/
    links:
      - kafka
      - mysql_binlog
    depends_on:
      - kafka
      - mysql_binlog
    restart: on-failure
    networks:
      - M_REP
#ELK - stack
#  kibana:
#    image: kibana:7.3.2
#    container_name: kibana-client
#    ports:
#        - "5601:5601"
#    networks:
#        - ELK
#        #restart: always
#    environment:
#        SERVER_NAME: kibana
#        ELASTICSEARCH_HOSTS: http://elasticsearch-server:9200
#  elasticsearch:
#    image: elasticsearch:7.3.2
#    container_name: elasticsearch-server
#    ports:
#        - "9200:9200"
#        - "9300:9300"
#        #restart: always
#    networks:
#        - ELK
#    ulimits:
#        nproc: 65535
#        memlock:
#           soft: -1
#           hard: -1
#    environment:
#        - node.name=elasticsearch1
#        - cluster.name=docker-cluster
#        - cluster.initial_master_nodes=elasticsearch1
#        - bootstrap.memory_lock=true
#        - "ES_JAVA_OPTS=-Xms256M -Xmx256M"
#        - http.cors.enabled=true
#        - http.cors.allow-origin=*
#        - network.host=_eth0_
#  logstash:
#    image: logstash:7.3.2
#    container_name: logstash-client
#    networks:
#        - ELK
#    ports:
#        - "5043:5043"
#        - "3232:3232"
#        - "5044:5044"
#    environment:
#        LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#    volumes:
#        - ./LiveServer/log:/usr/log-storage
#        - ./docker-storage/elk/sincedb:/usr/storage/
#       - ./docker-storage/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
#        - ./docker-storage/elk/logstash.yml:/usr/share/logstash/config/logstash.yml  
networks:
     M_REP:
     ELK: